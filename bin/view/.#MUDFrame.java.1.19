package view;

import java.awt.*;
import java.awt.event.*;

import java.io.IOException;
import java.util.ArrayList;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import network.*;
import model.MudModel;
import server.*;


/**
 * MUDFrame is contains the main visual display for the user. It will contain a
 * main combat window that will be used for playing in the game. There is a chat
 * tab that will be used to show only the chat between players. It will send all
 * entered text to the server and based on what command was used the proper
 * command will be called. The text will be displayed using ANSI coloring to
 * help distinguish between items, exits and so on.
 * 
 * @author Matt Turner, Ross Bottorf, Zach Boe, Jonathan Perrie
 * 
 */
public class MUDFrame extends JFrame {

	private CombatPanel comPanel;
	private ChatPanel chPanel;
	private JMenuBar menuBar;
	private JMenu mainFile;
	private JMenuItem exitMenuItem;
	private JMenuItem aboutMenuItem;
	private static MudModel mainModel;
	private network.Client client;
	private ArrayList<String> chatCmds;

	/**
	 * MUDFrame constructor will create the two panels, ChatPanel and
	 * CombatPanel. There two panels will serve as the main display of text in
	 * the world and chat. It also adds a JMenuBar with a About and Exit
	 * selection. Exit will quit the program and the About selection will
	 * display names of programmers and a little about the program.
	 */

	public MUDFrame() {
		chatCmds = new ArrayList<String>();
		this.addChatCommands();
	}

	/**
	 * TabChangeListener is the ChangeListener that is used with the
	 * JTabbedPane. It will be used when ever the tabs are clicked. It will
	 * check to see what the name on the tab is and based on which one was
	 * clicked on will set the focus to the TextField of either the chat or
	 * combat panel.
	 */
	public class TabChangeListener implements ChangeListener {
		public void stateChanged(ChangeEvent e) {
			JTabbedPane sourceTabbedPane = (JTabbedPane) e.getSource();
			int index = sourceTabbedPane.getSelectedIndex();
			if (sourceTabbedPane.getTitleAt(index).equals("Combat Screen")) {
				comPanel.reqFocus();
			} else {
				chPanel.reqFocus();
			}
		}
	}

	private boolean init() {

		this.client = new network.Client("localhost", 4000);

		if ((this.client != null) && this.client.connect()) {
			this.setDefaultCloseOperation(EXIT_ON_CLOSE);
			this.setTitle("MUD");
			this.setPreferredSize(new Dimension(1250, 700));
			this.setLocation(25, 50);

			menuBar = new JMenuBar();
			mainFile = new JMenu("File");
			exitMenuItem = new JMenuItem("Exit");
			aboutMenuItem = new JMenuItem("About");
			mainFile.add(aboutMenuItem);
			mainFile.add(exitMenuItem);
			exitMenuItem.addActionListener(new ExitListener());
			aboutMenuItem.addActionListener(new AboutListener());
			menuBar.add(mainFile);
			this.setJMenuBar(menuBar);

			mainModel = MudModel.getMudModel();

			// Construct combat panel fields and button
			JTextField textField = new JTextField();
			textField.addKeyListener(new EnterListener());
			textField.setSize(new Dimension(1100, 18));
			textField.setLocation(new Point(15, 587));

			JButton enterBut = new JButton("Enter");
			enterBut.addActionListener(new ButtonListener());
			enterBut.setSize(new Dimension(70, 30));
			enterBut.setLocation(new Point(1150, 580));

			comPanel = new CombatPanel();
			comPanel.add(enterBut);
			comPanel.add(textField);
			comPanel.setTextField(textField);

			// Construct chat panel text field and button
			JTextField chatTextField = new JTextField();
			chatTextField.addKeyListener(new ChatEnterListener());
			chatTextField.setSize(new Dimension(1100, 18));
			chatTextField.setLocation(new Point(15, 587));

			JButton chatEnterBut = new JButton("Enter");
			chatEnterBut.addActionListener(new ChatButtonListener());
			chatEnterBut.setSize(new Dimension(70, 30));
			chatEnterBut.setLocation(new Point(1150, 580));

			chPanel = new ChatPanel();
			chPanel.add(chatEnterBut);
			chPanel.add(chatTextField);
			chPanel.setTextField(chatTextField);

			mainModel.addObserver(comPanel);
			mainModel.addObserver(chPanel);

			this.addWindowListener(new WindowAdapter() {
				public void windowOpened(WindowEvent e) {
					comPanel.reqFocus();
				}
			});

			JTabbedPane tPane = new JTabbedPane();
			this.add(tPane, BorderLayout.CENTER);
			tPane.add("Combat Screen", comPanel);
			tPane.add("Chat", chPanel);
			tPane.addChangeListener(new TabChangeListener());
			this.setResizable(false);

			this.pack();
			this.setVisible(true);

			this.client.start();
			return true;
		} else
			return false;
	}

	/**
	 * The main method that will start the MUD. It will create a new MUDFrame
	 * and ask for a IP and port to connect to the server.
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		MUDFrame frame = new MUDFrame();
		if (frame.init() != true) {
			JOptionPane.showMessageDialog(null, "Couldn't connect to server");
			System.exit(1);
		}
	}

	/**
	 * AboutListener the the ActionListener the the About menu item. it will
	 * display the programmers names and a short description of the program.
	 */
	private class AboutListener implements ActionListener {

		public void actionPerformed(ActionEvent e) {
			JOptionPane.showMessageDialog(null, "MUD");
		}

	}

	/**
	 * ExitListener is the ActionListener for the Exit menu item. It will simple
	 * call System.exit(0) which will exit out of the current program.
	 */
	private class ExitListener implements ActionListener {
		public void actionPerformed(ActionEvent arg0) {
			System.exit(0);

		}

	}

	/**
	 * ButtonListener is the main ActionListener for the Enter button on the
	 * combat panel. Even though hitting enter will work to enter a command the
	 * button will serve the same purpose as hitting the enter key. It will
	 * clear the field once the button is pressed and reset the focus to the
	 * field.
	 */
	public class ButtonListener implements ActionListener {
		public void actionPerformed(ActionEvent arg0) {
			sendCommand();
		}
	}

	/**
	 * EnterListener is the KeyListener that waits for the Enter key to be
	 * pressed. This Listener will perform the exact same operation as the
	 * ButtonListener for the Enter button on the panel. It will take the
	 * command and execute it, clear the field and reset the focus back to the
	 * field.
	 */
	public class EnterListener implements KeyListener {
		public void keyTyped(KeyEvent e) {
		}

		public void keyPressed(KeyEvent e) {
			if (e.getKeyChar() == KeyEvent.VK_ENTER) {
				sendCommand();
			}
		}

		public void keyReleased(KeyEvent e) {

		}

	}

	/**
	 * ChatButtonListener is the main ActionListener for the Enter button on the
	 * chat panel. Even though hitting enter will work to enter a command the
	 * button will serve the same purpose as hitting the enter key. It will
	 * clear the field once the button is pressed and reset the focus to the
	 * field.
	 */
	public class ChatButtonListener implements ActionListener {
		public void actionPerformed(ActionEvent arg0) {
			sendChatCommand();
		}
	}

	/**
	 * ChatEnterListener is the KeyListener that waits for the Enter key to be
	 * pressed. This Listener will perform the exact same operation as the
	 * ButtonListener for the Enter button on the panel. It will take the
	 * command and execute it, clear the field and reset the focus back to the
	 * field.
	 */
	public class ChatEnterListener implements KeyListener {
		public void keyTyped(KeyEvent e) {
		}

		public void keyPressed(KeyEvent e) {
			if (e.getKeyChar() == KeyEvent.VK_ENTER) {
				sendChatCommand();
			}
		}

		public void keyReleased(KeyEvent e) {
		}

	}

	public void sendCommand() {
		String temp = comPanel.getTextField().getText();
		if (temp.equalsIgnoreCase("quit")){
			client.sendCommand(temp);
			System.exit(0);
		}
		else if (temp.equalsIgnoreCase("commands")) {
			mainModel.addText(this.listCommands());
		} else if (temp.toLowerCase().indexOf("ooc") == 0
				|| temp.toLowerCase().indexOf("say") == 0
				|| temp.toLowerCase().indexOf("tell") == 0) {
			client.sendCommand(temp);
			comPanel.getTextField().setText("");
		} else {
			client.sendCommand(temp);

		}
	}

	public String listCommands() {
		String cmds = "";
		cmds += "Avaliable commands are: " + "\n";
		cmds += "look" + "\n" + "ooc" + "\n" + "who" + "\n" + "say" + "\n"
				+ "tell" + "\n" + "score" + "\n" + "give" + "\n" 
				+ "get" + "\n" + "inventory" + "\n" + "drop" + "\n" + "use"
				+ "\n" + "quit" + "\n" + "shutdown" + "\n";
		return cmds;
	}

	public void addChatCommands() {
		chatCmds.add("ooc");
		chatCmds.add("tell");
		chatCmds.add("say");
	}

	public void sendChatCommand() {
		String temp = chPanel.getTextField().getText();
		if (temp.equalsIgnoreCase("quit")){
			client.sendCommand(temp);
			System.exit(0);
		}
		else if (temp.toLowerCase().indexOf("ooc") == 0
				|| temp.toLowerCase().indexOf("say") == 0
				|| temp.toLowerCase().indexOf("tell") == 0) {
			client.sendCommand(temp);

		} else {
			mainModel.addChatText("non chat text entered: " + temp);
		}
		temp = "";
	}

	public String getPlayer(String msg) {
		int index1 = msg.indexOf(" ");
		String temp = msg.substring(index1 + 1, msg.length());
		int index2 = temp.indexOf(" ");
		temp = temp.substring(0, index2);
		return temp;
	}

	public String getMsg(String msg) {
		int index1 = msg.indexOf(" ");
		String temp = msg.substring(index1 + 1, msg.length());
		int index2 = temp.indexOf(" ");
		temp = temp.substring(index2 + 1, temp.length());
		return temp;
	}

	public static model.MudModel getMainModel() {
		return mainModel;
	}
}
